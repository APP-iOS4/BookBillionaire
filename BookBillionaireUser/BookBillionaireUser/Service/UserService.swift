//
//  UserService.swift
//  BookBillionaireUser
//
//  Created by YUJIN JEON on 4/4/24.
//

import Foundation
import FirebaseFirestore
import BookBillionaireCore

class UserService: ObservableObject {
    static let shared = UserService()
    public var users: [User]
    
    private let allUserRef = Firestore.firestore().collection("User")
    
    /// Ïô∏Î∂ÄÏóêÏÑú Ïù∏Ïä§ÌÑ¥Ïä§Ìôî Î∞©ÏßÄÎ•º ÏúÑÌïú private Ï¥àÍ∏∞Ìôî
    private init() {
        users = []
    }
    
    /// Î™®Îì† Ïú†Ï†ÄÎì§Ïùò Ï†ïÎ≥¥Î•º Í∞ÄÏ†∏Ïò§Îäî Ìï®Ïàò
    func loadUsers() async {
        do {
            let querySnapshot = try await allUserRef.getDocuments()
            users = querySnapshot.documents.compactMap { document -> User? in
                do {
                    let user = try document.data(as: User.self)
                    return user
                } catch {
                    print("Error decoding user: \(error)")
                    return nil
                }
            }
        } catch {
            print("Error fetching documents: \(error)")
        }
    }
    
    /// Ïú†Ï†ÄÏùò Ï±ÖÏ†ïÎ≥¥ Îì±Î°ù(Í¥ÄÎ¶¨Ïö©)
    func setBooksToUser(userID: String, book: String) async {
        let userRef = allUserRef.document(userID)
        do {
            try await userRef.updateData([
                "myBooks" : FieldValue.arrayUnion([book])
            ])
            print("Ï±ÖÎÑ£Í∏∞ ÏÑ±Í≥µüßö‚Äç‚ôÄÔ∏è")
        } catch let error {
            print("\(#function) Ïú†Ï†ÄÏ†ïÎ≥¥Ïóê Ï±ÖÏùÑ ÎÑ£Îäî Í±∏ Ïã§Ìå®ÌñàÏùå‚òÑÔ∏è \(error)")
        }
    }
    
    /// Ïú†Ï†Ä IDÎ°ú Ïú†Ï†Ä Ï†ïÎ≥¥Î•º Î∂àÎü¨Ïò§Îäî Ìï®Ïàò
    func loadUserByID(_ UserID: String) async -> User {
        var user: User
        do {
            user = try await allUserRef.document(UserID).getDocument().data(as: User.self)
            print("\(user)")
            return user
        } catch {
            print("Error decoding book: \(error)")
            return User(id: "", nickName: "", address: "")
        }
    }
    
    // Ï±Ö ÏÜåÏú†Ïûê Ïú†Ï†Ä Îç∞Ïù¥ÌÑ∞ Ìò∏Ï∂ú
    func fetchUsers() {
        Task {
            await UserService.shared.loadUsers()
        }
    }
    
    func updateUserByID(_ userID: String, nickname: String, imageUrl: String) async {
        let userRef = allUserRef.document(userID)
        do {
            try await userRef.updateData([
                "nickname": nickname,
                "profileImage": imageUrl
            ])
            print("Ïú†Ï†Ä Ï†ïÎ≥¥ Î≥ÄÍ≤Ω ÏÑ±Í≥µ")
        } catch let error {
            print("Error updating user: \(error)")
        }
    }
}



